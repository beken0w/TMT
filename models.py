import os
import logging
import sqlite3

from dotenv import load_dotenv


load_dotenv()

db_name = os.getenv('db_name', default="main.db")

logging.basicConfig(level=logging.INFO,
                    filename='log_file.log',
                    filemode='a')


class Task:

    def add_value(self, name, value):
        setattr(self, name, value)

    def __beautify_response(self, rows):
        statuses = []
        ids = []
        result = []
        for row in rows:
            ids.append(row[0])
            statuses.append(row[3])
            result.append(
                f"{' '*40}–ó–∞–¥–∞—á–∞ ‚Ññ{row[0]}\n\n"
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {row[1]}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {row[2]}\n"
                f"–°—Ç–∞—Ç—É—Å: {'üíº –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' if row[3] == 0 else '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞'}"
            )
        return ids, statuses, result

    def __connect_to_db(self):
        if os.path.isfile(db_name):
            try:
                conn = sqlite3.connect(db_name)
                cursor = conn.cursor()
                logging.info("Connection successful!")
                return conn, cursor
            except Exception as e:
                raise Exception(
                    f"–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ:\n{e}")
        else:
            raise Exception("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    def __disconnect_from_db(self, conn):
        conn.commit()
        conn.close()
        logging.info("Connection disconnected!")

    def is_exist(self, id):
        conn, cursor = self.__connect_to_db()
        logging.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å–¥–∞–Ω–Ω—ã–º id")
        cursor.execute('SELECT count(*) from tasks where id = ?;', (id,))
        result = cursor.fetchone()
        self.__disconnect_from_db(conn)
        return result

    def check_status(self, id):
        conn, cursor = self.__connect_to_db()
        logging.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ —Å –¥–∞–Ω–Ω—ã–º id")
        cursor.execute('SELECT status from tasks where id = ?;', (id,))
        result = cursor.fetchone()
        self.__disconnect_from_db(conn)
        return result

    def get_created_task(self):
        conn, cursor = self.__connect_to_db()
        logging.info("–ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å")
        cursor.execute('select * from tasks order by id desc limit 1;')
        text = self.__beautify_response(cursor.fetchall())
        self.__disconnect_from_db(conn)
        return text

    def select_tasks(self):
        conn, cursor = self.__connect_to_db()
        logging.info("–ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –±–∞–∑—ã –≤—Å–µ –∑–∞–ø–∏—Å–∏")
        cursor.execute('SELECT * from tasks')
        text = self.__beautify_response(cursor.fetchall())
        self.__disconnect_from_db(conn)
        return text

    def insert_task(self):
        conn, cursor = self.__connect_to_db()
        logging.info("–°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ")
        cursor.execute('INSERT INTO tasks (title, description) VALUES(?, ?);',
                       (self.title, self.description))
        self.__disconnect_from_db(conn)

    def update_status(self, id):
        conn, cursor = self.__connect_to_db()
        logging.info("–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ —Å –¥–∞–Ω–Ω—ã–º id")
        cursor.execute('update tasks set status = 1 where id = ?;', (id,))
        self.__disconnect_from_db(conn)

    def delete_task(self, id):
        conn, cursor = self.__connect_to_db()
        logging.info("–£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã")
        cursor.execute('delete from tasks where id = ?;', (id,))
        self.__disconnect_from_db(conn)
