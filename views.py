import os
import logging
import datetime

import telebot
from telebot import types
from dotenv import load_dotenv

from models import Task, Exchange
from core.keyboards.reply import permanent_kb
from core.keyboards.inline import delete_kb, done_delete_kb, currency_kb
from parse_exchange import convert_to_rub, count_rub, parse_mir


logging.basicConfig(level=logging.INFO,
                    filename='log_file.log',
                    filemode='a')

load_dotenv()
if os.getenv("token") is not None:
    try:
        bot = telebot.TeleBot(os.getenv("token"))
        date_time = datetime.datetime.now().replace(microsecond=0)
        logging.info(f"\n{'='*30}[ {date_time} ]{'='*30}\n")
        logging.info("–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω. –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞")
    except Exception as e:
        logging.critical(f"–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ c –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –±–æ—Ç–∞:\n{e}")
        raise Exception(f"–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ c –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –±–æ—Ç–∞:\n{e}")
else:
    logging.critical("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise Exception("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

obj = Task()
money = Exchange()


def actual_commands(message):
    text =  "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"\
            "/list - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á,\n"\
            "/add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"\
            "/done <id> - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É\n"\
            "/delete <id> - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"\
            "–≥–¥–µ <id> - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏"
    bot.send_message(message.chat.id, text=text)
    logging.info("–û—Ç–ø—Ä–∞–≤–∏–ª –≤ —á–∞—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")


@bot.message_handler(commands=['start'])
def start_message(message):
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TO-DO List\n\n"\
            "    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n\n"\
            "üìù  –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏\n\n"\
            "‚úîÔ∏è  –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏\n\n"\
            "üóëÔ∏è  —É–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á–∏"
    bot.send_message(message.chat.id, text=text, reply_markup=permanent_kb())
    logging.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


def get_task_info(message):
    bot.send_message(message.chat.id, "üî§ –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, take_title)


def take_title(message):
    obj.add_value('title', message.text)
    bot.send_message(message.chat.id, "üî§ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, take_description)


def take_description(message):
    obj.add_value('description', message.text)
    obj.insert_task(message.from_user.id)
    bot.send_message(message.chat.id, "‚ùï –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!")
    chat_id = message.chat.id
    ids, statuses, result = obj.get_created_task()
    if statuses[0] == 0:
        keyboard = done_delete_kb(ids[0])
    else:
        keyboard = delete_kb(ids[0])
    bot.send_message(chat_id=chat_id, text=result[0], reply_markup=keyboard)
    logging.info("–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞")


def update_status(message):
    id = message.data.split()[1]
    chat_id = message.message.chat.id

    if obj.is_exist(id) == (1,) and obj.check_status(id) != (1,):
        obj.update_status(id)
        return True
    elif obj.check_status(id) == (1,):
        text = "‚ùó –ó–∞–¥–∞—á–∞ —Ä–∞–Ω–µ–µ –±—ã–ª–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"
        logging.error("–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É")
    else:
        text = "‚ùó –ó–∞–¥–∞—á–∏ —Å –¥–∞–Ω–Ω—ã–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    bot.send_message(chat_id=chat_id, text=text)
    logging.info(f"–û—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è UPDATE_STATUS: {text}")
    return False


def delete_task(message):
    id = message.data.split()[1]
    chat_id = message.message.chat.id
    logging.info("–†–∞–±–æ—Ç–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è DELETE_TASK")
    if obj.is_exist(id) == (1,):
        obj.delete_task(id)
        return True
    else:
        text = "‚ùó –ó–∞–¥–∞—á–∏ —Å –¥–∞–Ω–Ω—ã–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        bot.send_message(chat_id=chat_id, text=text)
        return False


def get_task_list(message):
    chat_id = message.chat.id
    ids, statuses, result = obj.select_tasks(message.from_user.id)
    if len(ids) > 0:
        for i in range(len(ids)):
            if statuses[0] == 0:
                keyboard = done_delete_kb(ids[0])
            else:
                keyboard = delete_kb(ids[0])
            bot.send_message(chat_id=chat_id, text=result[i],
                             reply_markup=keyboard)
        logging.info("–û—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è GET_TASK_LIST")
    else:
        bot.send_message(chat_id=chat_id, text="‚ùï –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç")
        logging.info("–û—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è GET_TASK_LIST: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç")


@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    if call.data in parse_mir():
        convert_currency(call)
        return
    chat_id = call.message.chat.id
    arg = call.data.split()[1]
    if arg.isdigit():
        if call.data.startswith('/delete'):
            logging.info("–ö–æ–º–∞–Ω–¥–∞ /delete –∑–∞–ø—É—â–µ–Ω–∞ —Å –∫–Ω–æ–ø–∫–∏")
            if delete_task(call):
                text = call.message.text.replace('üíº', '').replace('‚úÖ', '')[:call.message.text.find('\n')]
                new_message_text = f"{text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
                bot.edit_message_text(chat_id=call.message.chat.id,
                                      message_id=call.message.message_id,
                                      text=new_message_text)

        elif call.data.startswith('/done'):
            logging.info("–ö–æ–º–∞–Ω–¥–∞ /done –∑–∞–ø—É—â–µ–Ω–∞ —Å –∫–Ω–æ–ø–∫–∏")
            if update_status(call):
                keyboard = delete_kb(call.data.split()[1])
                new_message_text = call.message.text.replace('üíº –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞')
                bot.edit_message_text(chat_id=call.message.chat.id,
                                      message_id=call.message.message_id,
                                      text=new_message_text)
                bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                              message_id=call.message.message_id,
                                              reply_markup=keyboard)

    else:
        bot.send_message(chat_id, text="‚ùó –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ID –∑–∞–¥–∞—á–∏")
        logging.error("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ID –∑–∞–¥–∞—á–∏")


@bot.message_handler(content_types=['text'])
def urls(message):
    if message.text == "üí¨ –ö–æ–º–∞–Ω–¥—ã":
        actual_commands(message)
    elif message.text == "üìú –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á":
        get_task_list(message)
    elif message.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        get_task_info(message)
    elif message.text == "üí± –ö—É—Ä—Å '–ú–ò–†'":
        bot.send_message(message.chat.id, text=convert_to_rub())
    elif message.text == "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä—É–±–ª–∏ –≤ –≤–∞–ª—é—Ç—É":
        count_curr_1(message)
    else:
        bot.send_message(message.chat.id, text="‚ùó –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        actual_commands(message)


def count_curr_1(message):
    bot.send_message(message.chat.id, "üî§ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:")
    bot.register_next_step_handler(message, count_curr_2)


def count_curr_2(message):
    if message.text.strip().isdigit():
        money.__setattr__('value', float(message.text.replace(",", ".")))
        keyboard = currency_kb(parse_mir())
        bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç–µ:", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "üî§ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:")
        bot.register_next_step_handler(message, count_curr_2)


def convert_currency(call):
    curr = parse_mir()[call.data]
    res = money.value * curr
    bot.send_message(call.message.chat.id, res)


if __name__ == '__main__':
    bot.polling(none_stop=True)

# 1 —Ä—É–±–ª—å == 4.433 - –ê—Ä–º—è–Ω—Å–∫–∏–π –¥—Ä–∞–º
# 1 —Ä—É–±–ª—å == 28.811 - –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å
# 1 —Ä—É–±–ª—å == 3.063 - –í–µ–Ω–µ—Å—É—ç–ª—å—Å–∫–∏–π –±–æ–ª–∏–≤–∞—Ä
# 1 —Ä—É–±–ª—å == 272.777 - –í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π –¥–æ–Ω–≥
# 1 —Ä—É–±–ª—å == 5.156 - –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ
# 1 —Ä—É–±–ª—å == 1.361 - –ö—É–±–∏–Ω—Å–∫–∏–π –ø–µ—Å–æ
# 1 —Ä—É–±–ª—å == 1.006 - –ö—ã—Ä–≥—ã–∑—Å–∫–∏–π —Å–æ–º
# 1 —Ä—É–±–ª—å == 7.791 - –¢–∞–¥–∂–∏–∫—Å–∫–∏–π —Å–æ–º–æ–Ω–∏
# 1 —Ä—É–±–ª—å == 131.7 - –£–∑–±–µ–∫—Å–∫–∏–π —Å—É–º