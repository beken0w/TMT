import os
from models import Task
from dotenv import load_dotenv

import telebot
from telebot import types


load_dotenv()
bot = telebot.TeleBot(
    os.getenv("token",
              default="6233148573:AAFI1OqvrMkUVPgwfhBmyxTaqEfrYjC3vPo")
)


@bot.message_handler(commands=['commands'])
def actual_commands(message):
    text =  "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"\
            "/list - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á,\n"\
            "/add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"\
            "/done <id> - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É\n"\
            "/delete <id> - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"\
            "–≥–¥–µ <id> - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏"
    bot.send_message(message.chat.id, text=text)


@bot.message_handler(commands=['start'])
def start_message(message):
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n"\
            "–í—ã –æ—Ç–∫—Ä—ã–ª–∏ TO-DO List\n"\
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏\n"\
            "–ò–∑–º–µ–Ω—è—Ç—å –∏—Ö —Å—Ç–∞—Ç—É—Å\n"\
            "–£–¥–∞–ª—è—Ç—å –∏–∑ –±–∞–∑—ã"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    btn2 = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
    btn3 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.chat.id, text=text, reply_markup=markup)


@bot.message_handler(content_types=['text'])
def func(message):
    if message.text == "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã":
        actual_commands(message)
    elif message.text == "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á":
        get_task_list(message)
    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        get_task_info(message)
    elif message.text.startswith("/done"):
        update_status(message)
    elif message.text.startswith("/delete"):
        delete_task(message)

obj = Task()


@bot.message_handler(commands=['add'])
def get_task_info(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, take_title)


def take_title(message):
    obj.add_value('title', message.text)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, take_description)


def take_description(message):
    obj.add_value('description', message.text)
    bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!")
    bot.send_message(message.chat.id, obj.get_info())
    obj.insert_task()


@bot.message_handler(commands=['done'])
def update_status(message, id=None, chat_id=None):
    if id is None:
        id = message.text.split(' ', 1)[1]
    if chat_id is None:
        chat_id = message.chat.id
    text = "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"
    print(id, message.text, sep='==')
    obj.update_status(id)
    bot.send_message(chat_id=chat_id, text=text)


@bot.message_handler(commands=['delete'])
def delete_task(message, id=None, chat_id=None):
    if id is None:
        id = message.text.split(' ', 1)[1]
    if chat_id is None:
        chat_id = message.chat.id
    text = "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
    obj.delete_task(id)
    bot.send_message(chat_id=chat_id, text=text)


@bot.message_handler(commands=['list'])
def get_task_list(message):
    chat_id = message.chat.id
    ids, statuses, result = obj.select_tasks()
    if len(ids) > 0:
        for i in range(len(ids)):
            keyboard = types.InlineKeyboardMarkup()
            delete_button = types.InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f'/delete {ids[i]}')
            if statuses[i] == 0:
                status_button = types.InlineKeyboardButton(text=f"‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f'/done {ids[i]}')
                keyboard.add(status_button, delete_button)
            else:
                keyboard.add(delete_button)
            bot.send_message(chat_id=chat_id, text=result[i], reply_markup=keyboard)
    else:
        bot.send_message(chat_id=chat_id, text="–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–¥–∞—á–∏")


@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    chat_id = call.message.chat.id
    arg = call.data.split()[1]
    if call.data.startswith('/delete'):
        delete_task(call.data, id=arg, chat_id=chat_id)
    elif call.data.startswith('/done'):
        update_status(call.data, id=arg, chat_id=chat_id)


bot.polling(none_stop=True)
